version: "3.8"

services:
  react:
    image: sprysio/frontend_build:latest
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - spring_boot
    networks:
      - react-spring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  spring_boot:
    image: sprysio/backend_build:latest
    restart: always
    ports:
      - "8888:8888"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring-postgres
      - react-spring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    build: ./postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: testdb
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_USER: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    secrets:
      - db_password
    networks:
      - spring-postgres
      - postgres-pgadmin

  pgadmin:
    build: ./pgadmin
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - postgres-pgadmin
volumes:
  pg_data:
networks:
  react-spring:
  spring-postgres:
  postgres-pgadmin:
secrets:
  db_password:
    file: ./postgres/password.txt